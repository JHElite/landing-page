---
import type { HTMLAttributes } from "astro/types";
import { SECTION_DEFS } from "../constants";
import Icon from "./common/icon.astro";
import LogoLink from "./common/logo-link.astro";

interface Props extends HTMLAttributes<"div"> {}
const props = Astro.props;
---

<div id="mobile-menu" {...props}>
  <input id="mobile-menu-toggle" type="checkbox" class="drawer-toggle" />
  <div class="drawer-content h-full">
    <label
      for="mobile-menu-toggle"
      class="drawer-button btn btn-ghost h-full rounded-none aspect-square -mr-[var(--site-px)] transition-[margin]"
    >
      <Icon icon="hamburger" class="h-[2em]" />
    </label>
  </div>
  <div class="drawer-side duration-500 !h-dvh">
    <label
      for="mobile-menu-toggle"
      aria-label="close sidebar"
      class="[&&]:cursor-default !fixed top-0 left-0 right-0 !h-dvh flex !duration-0"
    ></label>
    <ul
      role="tablist"
      class="bg-base-300 w-80 max-w-[75vw] h-full flex flex-col shadow-2xl border-[var(--fallback-bc,oklch(var(--bc)/0.1))]"
    >
      <li class="inline-flex justify-between items-center h-20 pl-8">
        <LogoLink
          variant="small"
          class="close-mobile-menu h-10"
          iconProps={{ class: "h-full" }}
        />
        <button
          class="close-mobile-menu btn btn-ghost btn-square h-20 w-20 rounded-none"
          aria-label="close sidebar"
        >
          <div>
            <Icon icon="close" class="h-[2em] w-auto" />
          </div>
        </button>
      </li>
      {
        Object.values(SECTION_DEFS).map(
          ({ label, href, sectionId, tabClass }, idx) => (
            <li>
              <a
                role="tab"
                data-section-id={sectionId}
                class:list={[
                  tabClass,
                  "tl-tab tl-tab-y close-mobile-menu w-full pl-[1.4rem]",
                  { "tl-tab--selected": !idx },
                ]}
                {...{ href }}
              >
                {label}
              </a>
            </li>
          ),
        )
      }
    </ul>
  </div>
</div>

<style is:global>
  #mobile-menu {
    @apply drawer drawer-end w-fit h-full;
  }

  #mobile-menu
    .drawer-toggle:checked
    ~ .drawer-side:has(> :not(.drawer-overlay)) {
    @apply backdrop-blur-xl;
  }
</style>

<script>
  document.getElementById("mobile-menu")?.addEventListener(
    "touchmove",
    (e) => {
      e.preventDefault();
    },
    false,
  );

  document.querySelectorAll(".close-mobile-menu")?.forEach((ele) => {
    ele.addEventListener(
      "click",
      () => {
        const toggle = document.getElementById(
          "mobile-menu-toggle",
        ) as HTMLInputElement;
        toggle.checked = !toggle.checked;
      },
      { passive: true },
    );
  });
</script>
