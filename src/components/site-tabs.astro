---
import type { HTMLAttributes } from "astro/types";
import { SECTION_DEFS, TAB_CLASS, SECTION_CLASS } from "../constants";

interface Props extends HTMLAttributes<"div"> {}

const props = Astro.props;
---

<site-tabs
  id="site-tabs"
  data-props={JSON.stringify({
    sectionClass: SECTION_CLASS,
    tabClass: TAB_CLASS,
  })}
  {...props}
>
  <ul role="tablist">
    {
      Object.values(SECTION_DEFS).map(
        ({ label, href, tabClass, sectionId }) => (
          <li role="tab">
            <a
              data-section-id={sectionId}
              class:list={[tabClass, "tl-tab tl-tab-x"]}
              {...{ href }}
            >
              {label}
            </a>
          </li>
        ),
      )
    }
  </ul>
</site-tabs>

<style>
  ul {
    @apply h-full flex gap-3;
  }
</style>

<style is:global>
  #site-header.unstuck .tl-tab.tl-tab--selected {
    &&:not(:hover) {
      @apply border-b-transparent border-l-transparent bg-inherit;
    }
    &&.tl-tab-y {
      @apply touch:hover:bg-inherit touch:hover:border-l-transparent;
    }
  }
</style>

<script>
  import { throttle } from "../helpers/performance";

  interface Props {
    sectionClass: string;
    tabClass: string;
  }
  class SiteTabs extends HTMLElement {
    props: Props;
    siteTabs: HTMLElement[];
    siteSections: NodeListOf<HTMLElement>;
    visibilities: { [id: string]: number };

    constructor() {
      super();

      this.props = JSON.parse(this.dataset.props ?? "{}") as Props;
      this.siteTabs = Array.from(
        document.querySelectorAll(`.${this.props.tabClass}`),
      ) as HTMLElement[];
      this.siteSections = document.querySelectorAll(
        `.${this.props.sectionClass}`,
      );
      this.visibilities = {};

      const handleTabStyles = throttle(() => {
        const windowHeight = window.innerHeight;
        const NEAR_BOTTOM_THRESHOLD_PERCENT = 0.05;
        const scrollNearBottom =
          window.scrollY + windowHeight >=
          document.documentElement.scrollHeight -
            windowHeight * NEAR_BOTTOM_THRESHOLD_PERCENT;

        this.siteSections.forEach((section, idx, arr) => {
          const rect = section.getBoundingClientRect();

          const isLastSection = idx + 1 === arr.length;
          if (isLastSection && scrollNearBottom) {
            this.visibilities[section.id] = 1;
            return;
          }

          const topDiff = rect.top < 0 ? rect.top : 0;
          const bottomDiff = rect.top < 0 ? 0 : windowHeight - rect.bottom;
          const pxVisible = rect.height + topDiff + bottomDiff;

          this.visibilities[section.id] = pxVisible / windowHeight;
        });

        const selectedId = Object.entries(this.visibilities)
          .sort((a, b) => b[1] - a[1])
          .at(0)
          ?.at(0);

        this.setSelectedTab(selectedId);
      }, 500);

      window.addEventListener("scroll", handleTabStyles, { passive: true });

      this.siteTabs.forEach((tab) => {
        tab.addEventListener("click", () => {
          const sectionId = tab.dataset.sectionId;
          this.setSelectedTab(sectionId);
        });
      });
    }

    setSelectedTab(sectionId: string | number | undefined) {
      this.siteTabs.forEach((tab) => {
        if (tab.dataset.sectionId === sectionId) {
          tab.classList.add("tl-tab--selected");
        } else {
          tab.classList.remove("tl-tab--selected");
        }
      });
    }
  }

  customElements.define("site-tabs", SiteTabs);
</script>
