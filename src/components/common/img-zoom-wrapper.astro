---
import type { HTMLAttributes } from "astro/types";
import Icon from "./icon.astro";

interface Props extends HTMLAttributes<"div"> {}

const props = Astro.props;
---

<img-zoom-wrapper {...props}>
  <button class="open-button"><slot /></button>
  <dialog class="modal w-full">
    <div
      class="modal-box !transform-none !max-w-[100vw] !max-h-screen bg-transparent p-0 rounded-none w-fit cursor-zoom-in"
    >
      <slot />
      <button
        class="close-button fixed left-[calc(100vw-3.75rem)] top-[1.25rem] btn-overlay"
      >
        <Icon icon="close" class="h-[1.5rem]" /></button
      >
    </div>
    <form method="dialog" class="modal-backdrop">
      <button></button>
    </form>
  </dialog>
</img-zoom-wrapper>

<style is:global>
  img-zoom-wrapper {
    @apply w-full h-full;
  }
  img-zoom-wrapper .open-button,
  img-zoom-wrapper .open-button img {
    height: inherit;
    width: inherit;
  }
  img-zoom-wrapper dialog::backdrop {
    @apply backdrop-blur-2xl;
    background: oklch(0% 0 0 / 0.8) !important;
  }
  img-zoom-wrapper * {
    transition: none !important;
  }
  img-zoom-wrapper .close-button:focus-visible {
    outline: none;
  }
  img-zoom-wrapper .img-zoomed {
    @apply transform-none cursor-zoom-out object-contain;
  }
  img-zoom-wrapper .img-zoomed-portrait {
    @apply h-screen w-auto;
  }
  img-zoom-wrapper .img-zoomed-landscape {
    @apply w-screen h-auto;
  }
</style>

<script>
  class ImgZoomWrapper extends HTMLElement {
    constructor() {
      super();

      const img = this.querySelector<HTMLImageElement>(".modal-box img");
      const modal = this.querySelector<HTMLDialogElement>("dialog");

      this.querySelector<HTMLDialogElement>(".open-button")?.addEventListener(
        "click",
        () => {
          zoom();
          modal?.showModal();
        },
      );
      this.querySelectorAll<HTMLButtonElement>(
        ".close-button, form button",
      )?.forEach((button) =>
        button.addEventListener("click", () => {
          modal?.close();
          unZoom();
        }),
      );

      const zoom = () => {
        if (!img) return;

        const windowAr = window.innerWidth / window.innerHeight;
        const imgAr =
          parseFloat(img.getAttribute("width") ?? "1") /
          parseFloat(img.getAttribute("height") ?? "1");

        img.classList.add(
          "img-zoomed",
          imgAr < windowAr ? "img-zoomed-portrait" : "img-zoomed-landscape",
        );
      };
      const unZoom = () => {
        if (!img) return;

        img.classList.remove(
          "img-zoomed",
          "img-zoomed-portrait",
          "img-zoomed-landscape",
        );
      };
      const toggleZoom = () => {
        if (!img) return;

        if (img.classList.contains("img-zoomed")) {
          unZoom();
        } else {
          zoom();
        }
      };

      img?.addEventListener("click", () => {
        toggleZoom();
      });
    }
  }

  customElements.define("img-zoom-wrapper", ImgZoomWrapper);
</script>
