---
import type { HTMLAttributes } from "astro/types";
import Icon from "./icon.astro";
import { Image } from "astro:assets";
import { getManagedImage } from "../../helpers/media";
import ImgLinkHandler from "./raw-svgs/img-link-handler.astro";
import ImgZoomWrapper from "./img-zoom-wrapper.astro";
import SiteDrawer from "../site-drawer.astro";

interface Props extends HTMLAttributes<"div"> {
  images: { src: string; alt: string }[];
}
const { images, ...restProps } = Astro.props;
---

<carousel-comp {...restProps}>
  <div class="media-wrapper sm:media-wrapper-sm relative">
    <div
      class="carousel carousel-center w-full h-full space-x-[var(--carousel-gap)] px-[var(--carousel-px)] py-[4rem] my-[-4rem]"
    >
      {
        images.map(({ src, alt }, idx) => (
          <a
            target="_blank"
            class="carousel-item w-full md:w-3/4 h-[var(--carousel-img-height)] bg-base-300 overflow-hidden shadow-std"
          >
            <ImgZoomWrapper>
              <Image
                class="object-cover img-fade-in"
                loading={idx ? "lazy" : "eager"}
                decoding="async"
                src={getManagedImage(src)}
                {...{ alt }}
              />
            </ImgZoomWrapper>
          </a>
        ))
      }
    </div>

    <div
      class="absolute left-[var(--site-space-x)] sm:left-[calc(var(--carousel-gap)*1.5)] top-1/2 -translate-y-1/2"
    >
      <button
        class="btn-overlay carousel-comp__nav-btn-prev"
        aria-label="go to previous carousel slide"
      >
        <Icon icon="chevron-left" class="h-6" />
      </button>
    </div>

    <div
      class="absolute right-[var(--site-space-x)] sm:right-[calc(var(--carousel-gap)*1.5)] top-1/2 -translate-y-1/2"
    >
      <button
        class={`btn-overlay carousel-comp__nav-btn-next`}
        aria-label="go to next carousel slide"
      >
        <Icon icon="chevron-right" class="h-6 text-base-100" />
      </button>
    </div>
  </div>

  <div
    class="carousel-comp__controls flex w-full justify-center items-center gap-2 py-2 px-[var(--carousel-px)]"
  >
    <div class="flex w-full justify-end">
      <div
        class="flex items-center max-w-[7.5rem] gap-2 overflow-x-scroll no-scrollbar relative"
      >
        {
          images.map((_, idx) => (
            <button
              aria-label={`scroll to carousel slide ${idx + 1}`}
              class:list={[
                "carousel-comp__pg-btn btn btn-circle btn-xs btn-outline h-4 w-4 min-h-4",
                { "btn-active": !idx },
              ]}
            />
          ))
        }
      </div>
    </div>
    <div class="w-full flex items-center">
      <button
        class="carousel-comp__play-btn btn btn-circle btn-sm btn-ghost z-10"
        aria-label="pause or play carousel"
      >
        <Icon icon="pause" class="h-6" />
        <Icon icon="play" class="hidden h-6" />
      </button>
    </div>
  </div>
</carousel-comp>

<style is:global>
  .carousel-comp__nav-btn {
    && {
      @apply btn min-w-8 min-h-8 max-w-8 max-h-8 !btn-circle bg-neutral bg-opacity-60 no-touch:hover:bg-neutral no-touch:hover:bg-opacity-70 backdrop-blur-xl border-0;
    }
  }

  .carousel-comp__controls {
    --bc: var(--carousel-control-color, --bc);
  }

  @tailwind utilities;
  @layer utilities {
    .media-wrapper-sm .carousel {
      @apply space-x-[var(--carousel-gap-sm)] px-[var(--carousel-px-sm)];
    }
    .media-wrapper-sm .carousel-item {
      @apply rounded-xl;
    }
  }
</style>

<script>
  import { debounce } from "../../helpers/performance";
  import { scrollXIntoView } from "../../helpers/scroll";

  class Carousel extends HTMLElement {
    _activeSlideIdx: number;
    scrollContainer: Element | null;
    paused: boolean;
    numImages: number;
    playTimers: NodeJS.Timeout[];
    scrollTimer: NodeJS.Timeout | null;

    constructor() {
      super();

      this._activeSlideIdx = 0;
      this.scrollContainer = this.querySelector(".carousel");
      this.paused = false;
      this.numImages = this.scrollContainer?.children.length ?? 0;
      this.playTimers = [];
      this.scrollTimer = null;

      Array.from(this.querySelectorAll(`.carousel-comp__pg-btn`)).map(
        (e, idx) =>
          e.addEventListener("click", () => {
            this.activeSlideIdx = idx;
            this.scrollToIdx(this.activeSlideIdx);
          }),
      );

      this.querySelector(`.carousel-comp__nav-btn-prev`)?.addEventListener(
        "click",
        () => this.incrementSlide(-1),
      );

      this.querySelector(`.carousel-comp__nav-btn-next`)?.addEventListener(
        "click",
        () => this.incrementSlide(1),
      );

      const playButton = this.querySelector(`.carousel-comp__play-btn`);
      const switchPlayButtonIcon = () => {
        const children = Array.from(playButton?.children ?? []);
        if (this.paused) children.reverse();
        children.at(0)?.classList.remove("hidden");
        children.at(1)?.classList.add("hidden");
      };
      playButton?.addEventListener("click", () => {
        if (this.paused) {
          this.paused = false;
          switchPlayButtonIcon();
          this.incrementSlide(1);
          this.start();
        } else {
          this.paused = true;
          switchPlayButtonIcon();
          this.stop();
        }
      });

      Array.from(this.scrollContainer?.children ?? []).forEach((c, idx) => {
        if (!this.scrollContainer) return;

        const io = new IntersectionObserver(
          debounce((entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) this.activeSlideIdx = idx;
            });
          }),
          { threshold: 0.51 },
        );
        io.observe(c);
      });

      window.addEventListener("blur", () => {
        if (this.paused) return;
        this.stop();
      });

      window.addEventListener("focus", () => {
        if (this.paused) return;
        this.start();
      });

      const io = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting && !this.paused) {
              this.start();
            } else {
              this.stop();
            }
          });
        },
        { threshold: 0.51 },
      );
      io.observe(this);
    }

    get activeSlideIdx(): number {
      return this._activeSlideIdx;
    }

    set activeSlideIdx(idx: number) {
      if (!!this.querySelector("dialog[open]")) {
        if (!this.paused) this.restart();
        return;
      }

      this._activeSlideIdx = idx;

      this.querySelectorAll(`.carousel-comp__pg-btn`).forEach((ele, idx) => {
        if (idx === this._activeSlideIdx) {
          ele.classList.add("btn-active");
          scrollXIntoView(ele);
        } else {
          ele.classList.remove("btn-active");
        }
      });
      if (!this.paused) this.restart();
    }

    scrollToIdx(idx: number) {
      const slide = this.scrollContainer?.children[idx] as
        | HTMLElement
        | undefined;
      scrollXIntoView(slide);
    }

    incrementSlide(by: number) {
      const unsafeIdx = this.activeSlideIdx + by;
      this.activeSlideIdx =
        unsafeIdx < 0 ? this.numImages - 1 : unsafeIdx % this.numImages;
      this.scrollToIdx(this.activeSlideIdx);
    }

    start() {
      if (this.playTimers.length) return;
      this.playTimers.push(setTimeout(() => this.incrementSlide(1), 4000));
    }

    stop() {
      while (this.playTimers.length) {
        clearTimeout(this.playTimers.pop());
      }
    }

    restart() {
      this.stop();
      this.start();
    }
  }

  customElements.define("carousel-comp", Carousel);
</script>
