---
import type { HTMLAttributes } from "astro/types";
import Icon from "./icon.astro";
import { Image } from "astro:assets";
import { getManagedImage } from "../../helpers/media";

interface Props extends HTMLAttributes<"div"> {
  images: { src: string; alt: string }[];
}
const { images: imagesProp, ...restProps } = Astro.props;
const images = imagesProp.slice(0, 8);
---

<carousel-comp {...restProps}>
  <div class="relative">
    <div
      class="carousel carousel-center w-full h-full space-x-[var(--carousel-gap)] px-[var(--carousel-px)]"
    >
      {
        images.map(({ src, alt }, idx) => (
          <div class="carousel-item w-[calc(100%-calc(var(--carousel-px)*4))] sm:w-[calc(100%-calc(var(--carousel-px)*6)-calc(var(--carousel-gap)*2))] h-[var(--carousel-img-height)] bg-base-300 rounded-box overflow-hidden">
            <Image
              class="object-cover w-full h-full img-fade-in"
              loading={idx ? "lazy" : "eager"}
              decoding="async"
              src={getManagedImage(src)}
              {...{ alt }}
            />
          </div>
        ))
      }
    </div>

    <div
      class="absolute left-[calc(var(--carousel-px)*1.5)] top-1/2 -translate-y-1/2"
    >
      <button
        class={`carousel-comp__nav-btn-prev btn btn-sm btn-circle`}
        aria-label="go to previous carousel slide"
      >
        ❮
      </button>
    </div>

    <div
      class="absolute right-[calc(var(--carousel-px)*1.5)] top-1/2 -translate-y-1/2"
    >
      <button
        class={`carousel-comp__nav-btn-next btn btn-sm btn-circle`}
        aria-label="go to next carousel slide"
      >
        ❯
      </button>
    </div>
  </div>

  <div class="flex w-full justify-center items-center gap-2 py-2">
    {
      images.map((_, idx) => (
        <button
          aria-label={`scroll to carousel slide ${idx + 1}`}
          class:list={[
            "carousel-comp__pg-btn btn btn-circle btn-xs btn-outline no-touch:h-4 no-touch:w-4 no-touch:min-h-2",
            { "btn-active": !idx },
          ]}
        />
      ))
    }
    <div class="divider divider-horizontal mx-1"></div>
    <button
      class="carousel-comp__play-btn btn btn-circle btn-xs btn-ghost"
      aria-label="pause or play carousel"
    >
      <Icon icon="pause" class="h-5" />
      <Icon icon="play" class="hidden h-5" />
    </button>
  </div>
</carousel-comp>

<script>
  import { throttle } from "../../helpers/performance";

  class Carousel extends HTMLElement {
    _activeSlideIdx: number;
    scrollContainer: Element | null;
    paused: boolean;
    numImages: number;
    playTimers: NodeJS.Timeout[];
    scrollTimer: NodeJS.Timeout | null;

    constructor() {
      super();

      this._activeSlideIdx = 0;
      this.scrollContainer = this.querySelector(".carousel");
      this.paused = false;
      this.numImages = this.scrollContainer?.children.length ?? 0;
      this.playTimers = [];
      this.scrollTimer = null;

      Array.from(this.querySelectorAll(`.carousel-comp__pg-btn`)).map(
        (e, idx) =>
          e.addEventListener("click", () => {
            this.activeSlideIdx = idx;
            this.scrollToIdx(this.activeSlideIdx);
          }),
      );

      this.querySelector(`.carousel-comp__nav-btn-prev`)?.addEventListener(
        "click",
        () => this.incrementSlide(-1),
      );

      this.querySelector(`.carousel-comp__nav-btn-next`)?.addEventListener(
        "click",
        () => this.incrementSlide(1),
      );

      const playButton = this.querySelector(`.carousel-comp__play-btn`);
      const switchPlayButtonIcon = () => {
        const children = Array.from(playButton?.children ?? []);
        if (this.paused) children.reverse();
        children.at(0)?.classList.remove("hidden");
        children.at(1)?.classList.add("hidden");
      };
      playButton?.addEventListener("click", () => {
        if (this.paused) {
          this.paused = false;
          switchPlayButtonIcon();
          this.incrementSlide(1);
          this.start();
        } else {
          this.paused = true;
          switchPlayButtonIcon();
          this.stop();
        }
      });

      const handleActiveSlide = throttle(() => {
        if (!this.scrollContainer) return;

        Array.from(this.scrollContainer.children ?? []).forEach((c, idx) => {
          if (!this.scrollContainer) return;
          const parentRect = this.scrollContainer.getBoundingClientRect();
          const childRect = c.getBoundingClientRect();
          if (
            childRect.left >= parentRect.left &&
            childRect.right <= parentRect.right
          ) {
            this.activeSlideIdx = idx;
            if (!this.paused) this.restart();
          }
        });
      });
      this.scrollContainer?.addEventListener("scroll", handleActiveSlide, {
        passive: true,
      });

      window.addEventListener("blur", () => {
        if (this.paused) return;
        this.stop();
      });

      window.addEventListener("focus", () => {
        if (this.paused) return;
        this.start();
      });

      this.start();
    }

    get activeSlideIdx(): number {
      return this._activeSlideIdx;
    }

    set activeSlideIdx(idx: number) {
      this._activeSlideIdx = idx;

      this.querySelectorAll(`.carousel-comp__pg-btn`).forEach((e, idx) => {
        if (idx === this.activeSlideIdx) {
          e.classList.add("btn-active");
        } else {
          e.classList.remove("btn-active");
        }
      });
    }

    scrollToIdx(idx: number) {
      if (!this.paused) this.restart();
      const slide = this.scrollContainer?.children[idx];
      const slideWith = slide?.getBoundingClientRect().width ?? 0;
      this.scrollContainer?.scrollTo({
        left: slideWith * idx,
      });
    }

    incrementSlide(by: number) {
      const unsafeIdx = this.activeSlideIdx + by;
      this.activeSlideIdx =
        unsafeIdx < 0
          ? this.numImages + (unsafeIdx % this.numImages)
          : unsafeIdx % this.numImages;
      this.scrollToIdx(this.activeSlideIdx);
    }

    start() {
      if (this.playTimers.length) return;
      this.playTimers.push(setTimeout(() => this.incrementSlide(1), 6000));
    }

    stop() {
      while (this.playTimers.length) {
        clearTimeout(this.playTimers.pop());
      }
    }

    restart() {
      this.stop();
      this.start();
    }
  }

  customElements.define("carousel-comp", Carousel);
</script>
