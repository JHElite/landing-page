---
import type { HTMLAttributes } from "astro/types";
import { type AstroComponentFactory } from "astro/runtime/server/render/astro/factory.js";

const rawSvgs = await Astro.glob("./raw-svgs/*.astro");

type SvgMap = { [icon: string]: AstroComponentFactory };
const svgMap = rawSvgs.reduce<SvgMap>((map, s) => {
  const key = s.default.moduleId?.split("/").at(-1)?.replace(".astro", "");
  if (key) Object.assign(map, { [key]: s.default });
  return map;
}, {});

interface Props extends HTMLAttributes<"div"> {
  icon: string;
}
export interface IconProps extends Props {}

const props = Astro.props;
const { icon, ...restProps } = props;
const SelectedIcon = svgMap[icon];
---

<icon-comp {...restProps}>
  {SelectedIcon ? <SelectedIcon /> : <Fragment />}
</icon-comp>

<style is:global>
  icon-comp {
    @apply inline-flex h-[1em] max-w-full overflow-visible;

    & svg {
      height: inherit;
      width: inherit;
      max-height: inherit;
      max-width: inherit;
      fill: currentColor;
      overflow: visible;
    }
  }
</style>

<script>
  class CompIcon extends HTMLElement {
    constructor() {
      super();
    }
  }

  customElements.define("icon-comp", CompIcon);
</script>
