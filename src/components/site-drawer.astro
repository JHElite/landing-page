---
import type { HTMLAttributes } from "astro/types";
import { SECTION_DEFS } from "../constants";
import Icon from "./common/icon.astro";
import LogoLink from "./common/logo-link.astro";

interface Props extends HTMLAttributes<"div"> {}
const props = Astro.props;
---

<div id="site-drawer" {...props}>
  <input id="site-drawer-toggle" type="checkbox" class="drawer-toggle" />
  <div class="drawer-content h-full">
    <label
      for="site-drawer-toggle"
      class="drawer-button btn btn-ghost [&&]:min-h-[var(--nav-height)] [&&]:min-w-[var(--nav-height)] [&&]:rounded-none aspect-square -mr-[var(--site-space-x)] transition-[margin]"
    >
      <Icon icon="hamburger" class="h-[2em]" />
    </label>
  </div>
  <div id="site-drawer-side" class="drawer-side duration-500">
    <label
      for="site-drawer-toggle"
      aria-label="close sidebar"
      class="[&&]:cursor-default fixed inset-0 [&&]:duration-0"></label>
    <ul
      role="tablist"
      class="bg-base-200 w-80 max-w-[75vw] h-full flex flex-col shadow-2xl"
    >
      <li
        class="inline-flex justify-between items-center h-[var(--nav-height)] pl-8"
      >
        <LogoLink
          variant="small"
          class="close-site-drawer h-1/2"
          iconProps={{ class: "h-full" }}
        />
        <button
          class="close-site-drawer btn btn-ghost btn-square [&&]:min-h-[var(--nav-height)] [&&]:min-w-[var(--nav-height)] [&&]:rounded-none"
          aria-label="close sidebar"
        >
          <div>
            <Icon icon="close" class="h-[2em] w-auto" />
          </div>
        </button>
      </li>
      {
        Object.values(SECTION_DEFS).map(
          ({ label, href, sectionId, tabClass }) => (
            <li role="tab">
              <a
                data-section-id={sectionId}
                class:list={[tabClass, "tl-tab tl-tab-y close-site-drawer"]}
                {...{ href }}
              >
                {label}
              </a>
            </li>
          ),
        )
      }
    </ul>
  </div>
</div>

<style is:global>
  #site-drawer {
    @apply drawer drawer-end w-fit h-full;
  }

  #site-drawer
    .drawer-toggle:checked
    ~ .drawer-side:has(> :not(.drawer-overlay)) {
    /* @apply backdrop-blur-xl; */
  }
</style>

<script>
  const toggle = document.getElementById(
    "site-drawer-toggle",
  ) as HTMLInputElement | null;

  const closeDrawer = () => {
    !!toggle && (toggle.checked = false);
  };

  window?.addEventListener("keydown", (e) => {
    if (toggle?.checked && e.key === "Escape") {
      closeDrawer();
    }
  });

  // TODO: fix scroll bug if opened and wide
  document
    .getElementById("site-drawer-side")
    ?.addEventListener("touchmove", (e) => {
      e.preventDefault();
    });

  document.querySelectorAll(".close-site-drawer")?.forEach((ele) => {
    ele.addEventListener("click", closeDrawer, { passive: true });
  });
</script>
