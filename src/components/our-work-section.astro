---
import { getEntry } from "astro:content";
import type { ContentSection, OurWork } from "../content/types";
import { makeId } from "../helpers/strings";
import Carousel from "./common/carousel.astro";
import { SECTION_DEFS } from "../constants";
import Markdown from "./common/markdown.astro";

const {
  data: { title, galleries },
} = (await getEntry("home-page", "our-work")) as ContentSection<OurWork>;
const { sectionId, sectionClass } = SECTION_DEFS["our-work"];
---

<work-galleries
  id={sectionId}
  class:list={[
    sectionClass,
    `
      glassy glass-full glass-card pt-0 text-empty [&&]:px-0 flex flex-col 
      motion-safe:opacity-0 intersect:animate-fade-up intersect-once intersect-th-0.1 motion-reduce:intersect:animate-none
    `,
  ]}
>
  <div class="glass-full-header">
    <p class="text-title-2 p-[var(--site-space-x)] pb-0">{title}</p>
    <ul
      role="tablist"
      class="flex gap-2 no-scrollbar overflow-x-scroll mx-auto w-fit max-w-full px-[var(--site-space-x)]"
    >
      {
        galleries.map((gallery, idx) => (
          <li role="tab">
            <button
              class:list={[
                "gallery-tab tl-tab tl-tab-x text-empty",
                { "tl-tab--selected": !idx },
              ]}
              data-gallery={makeId(gallery.name)}
            >
              {gallery.name}
            </button>
          </li>
        ))
      }
    </ul>
  </div>

  {
    galleries.map((gallery, idx) => (
      <div
        class:list={["gallery-carousel", { hidden: !!idx }]}
        data-gallery={makeId(gallery.name)}
      >
        {!!gallery.description && (
          <Markdown
            content={gallery.description}
            noMarginY
            class="p-[var(--site-space-x)] mx-auto w-fit [&&]:max-w-[32rem] text-center"
          />
        )}
        <Carousel images={gallery.images} />
      </div>
    ))
  }
</work-galleries>

<style>
  .gallery-carousel {
    .markdown {
      --bc: var(--color-empty);
    }
    .carousel-comp__controls {
      --bc: var(--color-empty);
    }
  }
</style>

<script>
  class WorkGalleries extends HTMLElement {
    constructor() {
      super();
      const tabs = this.querySelectorAll<HTMLButtonElement>(".gallery-tab");
      const carousels =
        this.querySelectorAll<HTMLDivElement>(".gallery-carousel");

      tabs.forEach((tab) => {
        const tabGallery = tab.dataset.gallery;

        tab.addEventListener("click", () => {
          setTimeout(() => {
            tab.scrollIntoView({
              block: "nearest",
              inline: "center",
              behavior: "smooth",
            });
          });
          tabs.forEach((thisTab) => {
            const thisTabGallery = thisTab.dataset.gallery;
            if (tabGallery === thisTabGallery) {
              thisTab.classList.add("tl-tab--selected");
            } else {
              thisTab.classList.remove("tl-tab--selected");
            }
          });
          carousels.forEach((carousel) => {
            const carouselGallery = carousel.dataset.gallery;
            if (tabGallery === carouselGallery) {
              carousel.classList.remove("hidden");
            } else {
              carousel.classList.add("hidden");
            }
          });
        });
      });
    }
  }

  customElements.define("work-galleries", WorkGalleries);
</script>
